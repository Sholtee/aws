#####################################################
# foundation.yml
#
# Author: Denes Solti
#####################################################
Description: Foundation infrastructure. Can be deployed in any region

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'
  clientIP:
    Type: String
    Description: IP address to be allowed to initiate SSH connection

Resources:
  ###################
  # VPC
  ###################

  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 192.168.0.0/16
      InstanceTenancy: default

  VpcPrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Description: Resources in private subnet can access the internet but cannot be accessed outside the subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.168.10.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"

  VpcPrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref VpcNatRouteTable
      SubnetId: !Ref VpcPrivateSubnet1

  VpcPrivateSubnet2:  # AWS::RDS::DBSubnetGroup requires at least 2 subnets
    Type: "AWS::EC2::Subnet"
    Description: Resources in private subnet can access the internet but cannot be accessed outside the subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.168.20.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"

  VpcPrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref VpcNatRouteTable
      SubnetId: !Ref VpcPrivateSubnet2

  VpcPublicSubnet:
    Type: "AWS::EC2::Subnet"
    Description: Resources in public subnet can access the internet and also can be accessed outside the subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 192.168.30.0/24

  VpcPublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref VpcInternetRouteTable
      SubnetId: !Ref VpcPublicSubnet

  VpcInternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VpcInternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "Vpc"
      InternetGatewayId: !Ref "VpcInternetGateway"

  VpcInternetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "Vpc"

  VpcInternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "VpcInternetGateway"
      RouteTableId: !Ref "VpcInternetRouteTable"

  VpcNatElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  VpcNatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt "VpcNatElasticIP.AllocationId"
      SubnetId: !Ref "VpcPublicSubnet"

  VpcNatRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "Vpc"

  VpcNatRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref VpcNatGateway
      RouteTableId: !Ref VpcNatRouteTable

  ###################
  # Redis
  ###################

  RedisReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: !Sub "${app}-redis-cluster"
      ReplicationGroupDescription: Redis cache
      CacheNodeType: cache.t4g.micro
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      CacheParameterGroupName: default.redis7
      Engine: redis
      AutomaticFailoverEnabled: false
      NumNodeGroups: 1
      SecurityGroupIds:
        - !Ref RedisSecurityGroup

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis cache subnet group
      SubnetIds:
        - !Ref VpcPrivateSubnet1
        - !Ref VpcPrivateSubnet2

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Redis cache security groups
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !GetAtt VpcPrivateSubnet1.CidrBlock
          Description: "Resources in Private Subnet 1"
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !GetAtt VpcPrivateSubnet2.CidrBlock
          Description: "Resources in Private Subnet 2"
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Sub "${BastionInstance.PrivateIp}/32"
          Description: "Bastion Private IP"

  ###################
  # MySQL
  ###################

  DbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${app}-mysql-cluster"
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      MasterUsername: !Sub '{{resolve:secretsmanager:${DbSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DbSecret}:SecretString:password}}'
      DatabaseName: 'testdb'
      EnableHttpEndpoint: false
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 1
      VpcSecurityGroupIds:
        - !Ref DbSecurityGroup

  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DbCluster
      DBInstanceIdentifier: !Sub "${app}-mysql-instance"
      DBInstanceClass: db.serverless
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      PubliclyAccessible: false

  DbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${app}-mysql-secret"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "root"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        PasswordLength: 16

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Db subnet group
      SubnetIds:
        - !Ref VpcPrivateSubnet1
        - !Ref VpcPrivateSubnet2

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB cluster VPC security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !GetAtt VpcPrivateSubnet1.CidrBlock
          Description: "Resources in Private Subnet 1"
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !GetAtt VpcPrivateSubnet2.CidrBlock
          Description: "Resources in Private Subnet 1"
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Sub "${BastionInstance.PrivateIp}/32"
          Description: "Bastion Private IP"

  ###################
  # EC2 Image
  ###################

  LatestImage:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Region: !Ref AWS::Region
      Filter: Amazon Linux 2023*x86_64 HVM kernel-6.1
      ServiceToken: !GetAtt FetchLatestImageFunction.Arn

  FetchLatestImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const
            {send, SUCCESS, FAILED} = require('cfn-response'),          
            {EC2Client, DescribeImagesCommand} = require('@aws-sdk/client-ec2');

          exports.handler = async function(event, context) {
            console.log('Getting images...');
            try {          
              const
                {Region, Filter} = event.ResourceProperties,
                client = new EC2Client({region: Region}),
                {Images} = await client.send(new DescribeImagesCommand({
                  Filters: [
                    {
                      Name: 'state',
                      Values: ['available']
                    },
                    {
                      Name: 'description',
                      Values: [Filter]
                    }
                  ],
                  Owners: ['amazon']
                }));

              console.log(`Image list fetched: ${JSON.stringify(Images)}`);
              await send(event, context, SUCCESS, {
                Id: Images
                  .sort(({CreationDate: a}, {CreationDate: b}) => Date.parse(b) - Date.parse(a))[0]
                  .ImageId
              });
            } catch (err) {
              console.error(err);
              await send(event, context, FAILED, err);
            }
          };
      Handler: index.handler
      Runtime: nodejs18.x
      FunctionName: !Sub "${app}-fetch-latest-image-lambda"
      Role: !GetAtt FetchLatestImageFunctionExecutionRole.Arn
      MemorySize: 128
      Timeout: 20

  FetchLatestImageFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: allowImageQuery
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: '*'

  ###################
  # Bastion EC2
  ###################

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !GetAtt LatestImage.Id
      InstanceType: t2.micro
      KeyName: !Ref BastionAccessKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref  VpcPublicSubnet
          DeviceIndex: 0
          GroupSet:
            - !Ref BastionSecurityGroup
      Tags:
        -
          Key: Name
          Value: !Sub "${app}-bastion"

  BastionAccessKey:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: BastionAccessKey
      KeyType: rsa

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionSG
      GroupDescription: "Allow SSH connection"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub "${clientIP}/32"
          Description: "My public IP"

Outputs:
  BastionEndpoint:
    Value: !GetAtt BastionInstance.PublicIp
  BastionPrivateKeyPath:
    Value: !Sub "/ec2/keypair/${BastionAccessKey.KeyPairId}"
  MySqlEndpoint:
    Value: !GetAtt DbCluster.Endpoint.Address
  MySqlSecret:
    Value: !Ref DbSecret
  RedisEndpoint:
    Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address