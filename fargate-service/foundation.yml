#####################################################
# foundation.yml
#
# Author: Denes Solti
#####################################################
Description: Foundation infrastructure. Can be deployed in any region

Transform: AWS::LanguageExtensions

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'
  certificateArn:
    Type: String
    Description: Certificate to be used in HTTPListener
  dbName:
    Type: String
    Description: Name of the application database
    MaxLength: '32'
    Default: AppDb

Mappings:
  AZsByIndex:
    Values:
      "1": a
      "2": b

Resources:
  CloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt LoadBalancer.DNSName
            Id: 'LoadBalancerOrigin'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginReadTimeout: 60
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'
            - 'OPTIONS'
            - 'PUT'
            - 'PATCH'
            - 'POST'
            - 'DELETE'
          ViewerProtocolPolicy: redirect-to-https
          OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3" # Managed-AllViewer
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # Managed-CachingDisabled
          TargetOriginId: "LoadBalancerOrigin"

  ###################
  # Services
  ###################

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${app}-repository"

  ServicesCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${app}-services-cluster"

  ###################
  # VPC
  ###################

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      InstanceTenancy: default

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref VpcInternetGateway

  Fn::ForEach::VpcSubnets:
    - SubnetIndex
    - - "1"  # must be string
      - "2"
    - VpcPrivateSubnet${SubnetIndex}:
        Type: AWS::EC2::Subnet
        Description: Resources in private subnet can access the internet but cannot be accessed outside the subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !Sub "192.168.${SubnetIndex}0.0/24"
          #AvailabilityZone: !Select
          #  - !Ref SubnetIndex  # must be number
          #  - Fn::GetAZs: !Ref AWS::Region
          AvailabilityZone: !Join
            - ""
            - - !Ref AWS::Region
              - !FindInMap
                - AZsByIndex
                - Values
                - !Ref SubnetIndex
          MapPublicIpOnLaunch: false

      VpcPrivateRouteTable${SubnetIndex}:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc

      VpcPrivateSubnet${SubnetIndex}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref
            Fn::Sub: "VpcPrivateRouteTable${SubnetIndex}"
          SubnetId: !Ref
            Fn::Sub: "VpcPrivateSubnet${SubnetIndex}"

      VpcPrivateSubnet${SubnetIndex}NatRoute:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: "0.0.0.0/0"
          NatGatewayId: !Ref
            Fn::Sub: "VpcNatGateway${SubnetIndex}"
          RouteTableId: !Ref
            Fn::Sub: "VpcPrivateRouteTable${SubnetIndex}"

      VpcPublicSubnet${SubnetIndex}:
        Type: AWS::EC2::Subnet
        Description: Resources in public subnet can access the internet and also can be accessed outside the subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !Sub "192.168.${SubnetIndex}1.0/24"
          #AvailabilityZone: !Select
          #  - !Ref SubnetIndex  # must be number
          #  - Fn::GetAZs: !Ref AWS::Region
          AvailabilityZone: !Join
            - ""
            - - !Ref AWS::Region
              - !FindInMap
                - AZsByIndex
                - Values
                - !Ref SubnetIndex
          MapPublicIpOnLaunch: true

      VpcPublicRouteTable${SubnetIndex}:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc

      VpcPublicSubnet${SubnetIndex}InternetRoute:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: "0.0.0.0/0"
          GatewayId: !Ref VpcInternetGateway
          RouteTableId: !Ref
            Fn::Sub: "VpcPublicRouteTable${SubnetIndex}"

      VpcPublicSubnet${SubnetIndex}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref
            Fn::Sub: "VpcPublicRouteTable${SubnetIndex}"
          SubnetId: !Ref
            Fn::Sub: "VpcPublicSubnet${SubnetIndex}"

      VpcNatPublicIP${SubnetIndex}:
        Type: AWS::EC2::EIP
        Properties:
          Domain: vpc

      VpcNatGateway${SubnetIndex}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub "VpcNatPublicIP${SubnetIndex}"
            - AllocationId
          SubnetId: !Ref
            Fn::Sub: "VpcPublicSubnet${SubnetIndex}"

  #####################
  # Load balancer
  #####################

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing  # cannot be "internal" if we want to use as a CF origin
      Subnets:
        - !Ref VpcPublicSubnet1
        - !Ref VpcPublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref certificateArn
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            MessageBody: '{"error": "notFound"}'
            ContentType: 'application/json'

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS from all
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ###################
  # DB
  ###################

  DbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub "${app}-db-cluster"
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      MasterUsername: !Sub '{{resolve:secretsmanager:${DbSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DbSecret}:SecretString:password}}'
      DatabaseName: !Ref dbName
      EnableHttpEndpoint: false
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 1
      VpcSecurityGroupIds:
        - !Ref DbSecurityGroup

  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DbCluster
      DBInstanceIdentifier: !Sub "${app}-db-instance"
      DBInstanceClass: db.serverless
      DBSubnetGroupName: !Ref DbSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      PubliclyAccessible: false

  DbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${app}-db-secret"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "root"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        PasswordLength: 16

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Db subnet group
      SubnetIds:
        - !Ref VpcPrivateSubnet1
        - !Ref VpcPrivateSubnet2

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB cluster VPC security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !GetAtt VpcPrivateSubnet1.CidrBlock
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !GetAtt VpcPrivateSubnet2.CidrBlock

#####################
# Outputs
#####################

Outputs:
  DbName:
    Value: !Ref dbName
    Export:
      Name: !Sub "${app}-db-name"
  DbEndpoint:
    Value: !GetAtt DbCluster.Endpoint.Address
    Export:
      Name: !Sub "${app}-db-endpoint"
  DbReaderEndpoint:
    Value: !GetAtt DbCluster.ReadEndpoint.Address
    Export:
      Name: !Sub "${app}-db-reader-endpoint"
  DbPort:
    Value: !GetAtt DbCluster.Endpoint.Port
    Export:
      Name: !Sub "${app}-db-port"
  DbSecretArn:
    Value: !Ref DbSecret
    Export:
      Name: !Sub "${app}-db-secret-arn"
  EcrRepositoryUri:
    Value: !GetAtt EcrRepository.RepositoryUri
    Export:
      Name: !Sub "${app}-ecr-repository-uri"
  HTTPSListenerArn:
    Value: !Ref HTTPSListener
    Export:
      Name: !Sub "${app}-http-listener-arn"
  ServicesCluster:
    Value: !Ref ServicesCluster
    Export:
      Name: !Sub "${app}-services-cluster"
  VpcId:
    Value: !Ref Vpc
    Export:
      Name: !Sub "${app}-vpc-id"

  Fn::ForEach::VpcOutputs:
    - SubnetIndex
    - - "1"  # must be string
      - "2"
    - PublicSubnet${SubnetIndex}Id:
        Value: !Ref
          Fn::Sub: "VpcPublicSubnet${SubnetIndex}"
        Export:
          Name: !Sub "${app}-vpc-public-subnet-${SubnetIndex}-id"
      PublicSubnet${SubnetIndex}CidrIp:
        Value: !GetAtt
          - !Sub "VpcPublicSubnet${SubnetIndex}"
          - CidrBlock
        Export:
          Name: !Sub "${app}-vpc-public-subnet-${SubnetIndex}-cidr-ip"
      PrivateSubnet${SubnetIndex}Id:
        Value: !Ref
          Fn::Sub: "VpcPrivateSubnet${SubnetIndex}"
        Export:
          Name: !Sub "${app}-vpc-private-subnet-${SubnetIndex}-id"
      PrivateSubnet${SubnetIndex}CidrIp:
        Value: !GetAtt
          - !Sub "VpcPrivateSubnet${SubnetIndex}"
          - CidrBlock
        Export:
          Name: !Sub "${app}-vpc-private-subnet-${SubnetIndex}-cidr-ip"