#####################################################
# kb.yml
#
# Author: Denes Solti
#####################################################
Description: Knowledge base infrastructure.

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'

Resources:
  ##########################
  # OpenSearch
  ##########################

  OpenSearchCollection:
    Type: AWS::OpenSearchServerless::Collection
    DependsOn: OpenSearchEncryptionPolicy
    Properties:
      Description: OpenSearch collection
      Name: !Sub "${app}-os-collection"
      Type: VECTORSEARCH
    Metadata:
      aws:cdk:path: KB/OpenSearch/Resource

  OpenSearchAdmin:
    Type: AWS::IAM::User
    Properties:
      UserName: OpenSearchAdmin
    Metadata:
      aws:cdk:path: KB/OpenSearch/Admin/Resource

  OpenSearchAdminCredentials:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: Active
      UserName: !Ref OpenSearchAdmin
    Metadata:
      aws:cdk:path: KB/OpenSearch/Admin/Credentials

  OpenSearchAdminGroup:
    Type: AWS::IAM::Group
    Metadata:
      aws:cdk:path: KB/OpenSearch/Admin/Group

  OpenSearchAdminPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: OpenSearchAdmins
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: aoss:*
            Resource: "*"
      Groups:
        - !Ref OpenSearchAdminGroup
    Metadata:
      aws:cdk:path: KB/OpenSearch/Admin/Policies

  OpenSearchAdmins:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref OpenSearchAdminGroup
      Users:
        - !Ref OpenSearchAdmin
    Metadata:
      aws:cdk:path: KB/OpenSearch/Admin/UserToGroupAddition

  OpenSearchEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub "${app}-os-encryption-policy"
      Policy: !Sub '{"Rules":[{"Resource":["collection/${app}-os-collection"],"ResourceType":"collection"}],"AWSOwnedKey":true}'
      Type: encryption
    Metadata:
      aws:cdk:path: KB/OpenSearch/Policy/EncryptionPolicy

  OpenSearchNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub "${app}-os-network-policy"
      Policy: !Sub '[{"Rules":[{"Resource":["collection/${app}-os-collection"],"ResourceType":"collection"}],"AllowFromPublic":true}]'
      Type: network
    Metadata:
      aws:cdk:path: KB/OpenSearch/Policy/NetworkPolicy

  OpenSearchDataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: !Sub "${app}-os-data-access-policy"
      Policy: !Sub '[{"Rules":[{"Resource":["collection/${app}-os-collection"],"Permission":["aoss:CreateCollectionItems","aoss:DeleteCollectionItems","aoss:UpdateCollectionItems","aoss:DescribeCollectionItems"],"ResourceType":"collection"},{"Resource":["index/${app}-os-collection/*"],"Permission":["aoss:CreateIndex","aoss:DeleteIndex","aoss:UpdateIndex","aoss:DescribeIndex","aoss:ReadDocument","aoss:WriteDocument"],"ResourceType":"index"}],"Principal":["${BedrockExecutionRole.Arn}","${OpenSearchAdmin.Arn}"],"Description":"-"}]'
      Type: data
    Metadata:
      aws:cdk:path: KB/OpenSearch/Policy/DataAccessPolicy

  OpenSearchIndexUpdaterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const
            {promisify} = require('util'),
            exec = promisify(require('child_process').exec),
            mkdir = promisify(require('fs').mkdir),
            {tmpdir} = require('os'),
            {join} = require('path'),
            {REGION, OS_ENDPOINT, ADMIN_KEY, ADMIN_SECRET} = process.env;
          
          exports.handler = async function(event, context) {
            const appDir = join(tmpdir(), 'index_updater');
            await mkdir(appDir);

            console.log('Installing OpenSearch client...');
            await exec(
              `npm install --loglevel=verbose --logs-dir="${tmpdir()}" --cache="${join(tmpdir(), 'npm_cache')}" --prefix="${appDir}" @opensearch-project/opensearch@2.7.0`
            );
          
            console.log('Creating client...');
            const
              {Client} = require(join(appDir, 'node_modules', '@opensearch-project', 'opensearch')),
              {AwsSigv4Signer} = require(join(appDir, 'node_modules', '@opensearch-project', 'opensearch', 'lib', 'aws')),
              client = new Client({
                ...AwsSigv4Signer({
                  region: REGION,
                  service: 'aoss',
                  async getCredentials() {  // needs to be async
                    return {
                      accessKeyId: ADMIN_KEY,
                      secretAccessKey: ADMIN_SECRET
                    };
                  }
                }),
                node: OS_ENDPOINT
              });
          
            console.log('Creating new index...');
            const response = await client.indices.create({
              index: 'test-index',
              body: JSON.stringify({
                
              })
            });
            console.log(response);
          };
      FunctionName: !Sub "${app}-os-index-updater"
      Runtime: nodejs18.x
      Handler: index.handler
      Timeout: 120
      MemorySize: 128
      Role: !GetAtt OpenSearchIndexUpdaterLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          OS_ENDPOINT: !GetAtt OpenSearchCollection.CollectionEndpoint
          ADMIN_KEY: !Ref OpenSearchAdminCredentials
          ADMIN_SECRET: !GetAtt OpenSearchAdminCredentials.SecretAccessKey
    Metadata:
      aws:cdk:path: KB/OpenSearch/Index/UpdaterLambda/Resource

  OpenSearchIndexUpdaterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: KB/OpenSearch/Index/UpdaterLambda/Role

  ##########################
  # Bedrock
  ##########################

  BedrockExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
      Policies:
        - PolicyName: allowOpenSearchApiAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                Resource:
                  - !GetAtt OpenSearchCollection.Arn
    Metadata:
      aws:cdk:path: KB/Bedrock/ExecutionRole