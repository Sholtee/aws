#####################################################
# service1.yml
#
# Author: Denes Solti
#####################################################
Transform: AWS::LanguageExtensions

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'
  externalClientArns:
    Type: String
    Description: Comma delimited list of accounts we want to grant access to. For instance "arn:aws:iam::222333444555:root"
  s3Key:
    Type: String
    Description: Resource path
  path:
    Type: String
    Description: The resource path on which the API will be available, for instance "test"
    Default: test
  stage:
    Type: String
    Description: API stage, for instance "dev", "test" or "prod"
    Default: test
  httpMethod:
    Type: String
    Description: The HTTP method to be used
    Default: POST

Resources:
  serviceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub "${app}-lambda-bucket-name"
        S3Key: !Ref s3Key
      FunctionName: !Sub "${AWS::StackName}-lambda"
      Handler: index.handler
      Role: !GetAtt serviceLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 5
      MemorySize: 128

  serviceLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: 90

  serviceLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  serviceApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Test API
      Description: Test API
      FailOnWarnings: true
      Policy:
        Fn::ToJsonString:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Split
                  - ","
                  - !Ref externalClientArns
              Action: "execute-api:Invoke"
              Resource:
                - !Sub "execute-api:/${stage}/${httpMethod}/${path}"

  serviceApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt serviceLambda.Arn
      Principal: apigateway.amazonaws.com

  serviceApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
                - logs:GetLogEvents
                - logs:FilterLogEvents
              Resource: "*"

  serviceApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt serviceApiRole.Arn

  serviceApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - serviceRequest
    Properties:
      RestApiId: !Ref serviceApi

  serviceApiStage:
    DependsOn:
      - serviceApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref serviceApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref serviceApi
      StageName: !Ref stage

  serviceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref serviceApi
      ParentId: !GetAtt serviceApi.RootResourceId
      PathPart: !Ref path

  serviceRequest:
    DependsOn:
      - serviceApiLambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: !Ref httpMethod
      Integration:
        Type: AWS
        IntegrationHttpMethod: !Ref httpMethod
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${serviceLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
          - StatusCode: 400
            SelectionPattern: Malformed input
          - StatusCode: 500
            SelectionPattern: Error
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
              "parameters": {
                "someParameter": "$inputRoot.someParameter"
              },
              "client": {
                "accountId": "$context.identity.accountId",
                "user": "$context.identity.userArn"
              }
            }
        PassthroughBehavior: NEVER
      ResourceId: !Ref serviceResource
      RestApiId: !Ref serviceApi
      RequestValidatorId: !Ref serviceRequestValidator
      RequestModels:
        application/json : !Ref serviceRequestMode
      MethodResponses:
        - StatusCode: 200

  serviceRequestMode:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref serviceApi
      ContentType: application/json
      Description: Model for token request
      Name: RequestModel
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Request model
        type: object
        required:
          - someParameter
        properties:
          someParameter:
            type: string
        additionalProperties: false

  serviceRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: Request validator
      RestApiId: !Ref serviceApi
      ValidateRequestBody: true

Outputs:
  Url:
    Value: !Sub "https://${serviceApi}.execute-api.${AWS::Region}.amazonaws.com/${stage}/${path}"