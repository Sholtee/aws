#####################################################
# global.yml
#
# Author: Denes Solti
#####################################################
Description: Global infrastructure. Needs to deployed in "us-east-1" region

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'

Resources:
  RequestSignerUser:
    Type: AWS::IAM::User
    Description: CloudFront user to sign the incoming requests
    Properties:
      UserName: !Sub "${app}-request-signer"
      Path: "/"
      Policies:
        - PolicyName: allowLambdaUrlInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunctionUrl
                Resource: "*"

  RequestSignerUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref RequestSignerUser

  RequestSignerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda that signs the incoming requests. Required for IAM validation
      Code:
        ZipFile: !Sub |
          'use strict';
          const
            {SSMClient, GetParameterCommand} = require('@aws-sdk/client-ssm'),
            {SignatureV4} = require('@aws-sdk/signature-v4'),
            {createHash, createHmac} = require('crypto'),

            ssmClient = new SSMClient({region: 'us-east-1'}),
            sigV4 = new SignatureV4({
              service: 'lambda',
              region: 'us-east-1',
              credentials: async function() {
                return {
                  accessKeyId: await getParameter('${app}-request-signer-user-access-key'),
                  secretAccessKey: await getParameter('${app}-request-signer-user-secret')
                };       
              },
              sha256: function(secret) {
                return secret ? createHmac('sha256', secret) : createHash('sha256');
              }
            }),
            excludedHeaders = (async function() {
              return (await getParameter('${app}-request-signer-excluded-headers')).split(',');
            })();
            
          exports.handler = async function(event, context, callback) {
            try {
              console.log('Lambda context: ' + JSON.stringify(context));
              console.log('Request available: ' + JSON.stringify(event));
      
              const
                request = event.Records[0].cf.request,
                eh = await excludedHeaders,
                signed = await sigV4.sign(
                  {
                    hostname: request.headers.host[0].value,
                    method: request.method,
                    protocol: 'https:',
                    path: request.uri,
                    // query: ...,
                    headers: Object
                      .entries(request.headers)
                      .filter(([key]) => eh.indexOf(key) < 0)
                      .map(([_, header]) => ({[header[0].key]: header[0].value}))
                      .reduce((accu, curr) => ({...accu, ...curr}), {}),
                    body: request.body?.data && request.body.encoding === 'base64'
                      ? Buffer.from(request.body.data, request.body.encoding)
                      : request.body?.data
                  },
                  {
                    signingRegion: /(?<urlid>\w+)\.lambda-url\.(?<region>[\w-]+)\.on\.aws/i
                      .exec(request.headers.host[0].value)
                      .groups
                      .region
                  }
                );
              
              request.headers = Object
                .entries(signed.headers)
                .map(([key, value]) => ({[key.toLowerCase()]: [{key: key, value}]}))
                .reduce((accu, curr) => ({...accu, ...curr}), {});
              
              console.log('Request signed successfully: ' + JSON.stringify(request));
  
              return callback(null, request);
            } catch (err) {
              console.error(err);
              return callback(err);
            }
          };
          
          async function getParameter(name) {
            return (await ssmClient.send(new GetParameterCommand({Name: name})))
              .Parameter
              .Value;
          }
      FunctionName: !Sub "${app}-request-signer"
      Handler: index.handler
      Role: !GetAtt RequestSignerLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 5
      MemorySize: 128

  RequestSignerLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: Lambda version. Lambda@Edge requires exact version
      FunctionName: !Ref RequestSignerLambda

  RequestSignerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
            - replicator.lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: allowSSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter*
                Resource: '*'
        - PolicyName: allowCloudFrontReplication
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - lambda:GetFunction
                - lambda:EnableReplication*
                - lambda:InvokeFunction
                - iam:CreateServiceLinkedRole
                - cloudfront:UpdateDistribution
              Resource: '*'

  RequestSignerExcludedHeaders:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Headers to be excluded when signing the request. Must be store as a parameter as Lambda@Edge cannot have environment variable defined
      Name: !Sub "${app}-request-signer-excluded-headers"
      Value: x-forwarded-for,te
      Type: String
  
  RequestSignerLambdaArn:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Request signer lambda ARN. Resources from other regions can use this parameter. It requires as cross region export/import is not allowed
      Name: !Sub "${app}-request-signer-lambda-arn"
      Value: !Ref RequestSignerLambdaVersion
      Type: String

  RequestSignerUserArn:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Request signer user ARN. Resources from other regions can use this parameter. It requires as cross region export/import is not allowed
      Name: !Sub "${app}-request-signer-user-arn"
      Value: !GetAtt RequestSignerUser.Arn
      Type: String

  RequestSignerUserKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${app}-request-signer-user-access-key"
      Value: !Ref RequestSignerUserAccessKey
      Type: String

  RequestSignerUserSecret:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${app}-request-signer-user-secret"
      Value: !GetAtt RequestSignerUserAccessKey.SecretAccessKey
      Type: String