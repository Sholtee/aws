#####################################################
# foundation.yml
#
# Author: Denes Solti
#####################################################
Description: Foundation infrastructure. Can be deployed in any region

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'
  deploymentId:
    Type: String
    Description: The unique deployment id. Must be changed in each deployment
    MaxLength: '50'
    
Resources:
  #####################
  # 404 handler
  #####################
 
  404HandlerLambda:
    Type: AWS::Lambda::Function
    Description: Function returning 404
    Properties:     
      Code:
        ZipFile: |
          'use strict';
          exports.handler = function(event, context, callback) {
            try {
              console.log(`Returning 404 for request: ${JSON.stringify(event)}`);        
              return callback(null, {
                statusCode: 404,
                headers: {
                  'Content-Type': 'text/html'
                },
                body: `
                  <!DOCTYPE html>
                  <html lang="en">
                    <head>
                      <meta charset="utf-8">
                      <title>Not Found</title>
                    </head>
                    <body>
                      <p>Not found</p>
                    </body>
                  </html>
                `
              });         
            } catch (err) {
              console.error(err);
              return callback(err);
            }
          };
      FunctionName: !Sub "${app}-404-handler-lambda"
      Handler: index.handler
      Role: !GetAtt 404HandlerLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 128
      
  404HandlerLambdaUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: AWS_IAM
      TargetFunctionArn: !Ref 404HandlerLambda

  404HandlerLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"

  404HandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref 404HandlerLambda
      Principal: !GetAtt RequestSignerUserArn.Value
      Action: lambda:InvokeFunctionUrl
      FunctionUrlAuthType: AWS_IAM
            
  #####################
  # CloudFront
  #####################

  CloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt 404HandlerLambdaUrl.FunctionUrl]]
            Id: '404HandlerLambdaOrigin'
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'
            - 'OPTIONS'
            - 'PUT'
            - 'PATCH'
            - 'POST'
            - 'DELETE'
          ViewerProtocolPolicy: redirect-to-https
          OriginRequestPolicyId: "b689b0a8-53d0-40ab-baf2-68738e2966ac" # Managed-AllViewerExceptHostHeader
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Managed-CachingDisabled
          TargetOriginId: 404HandlerLambdaOrigin
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !GetAtt RequestSignerLambdaArn.Value
              IncludeBody: true

  #####################
  # CloudFront updater
  #####################

  CloudFrontUpdaterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          'use strict';
          const
            {send, SUCCESS, FAILED} = require('cfn-response'),
            {CloudFrontClient, GetDistributionCommand, UpdateDistributionCommand} = require('@aws-sdk/client-cloudfront');

          exports.handler = async function(event, context) {
            console.log('Updating CloudFront distro: "${CloudFrontDistro}"');
            try {          
              const
                client = new CloudFrontClient(),
                {RequestType, ResourceProperties: {OriginId, Domain, Path, AllowedMethods}} = event,
                {ETag, Distribution: {DistributionConfig}} = await client.send(new GetDistributionCommand({Id: '${CloudFrontDistro}'})),
                {Origins, CacheBehaviors, DefaultCacheBehavior} = DistributionConfig;
          
              switch (RequestType) {
                case 'Create':
                  console.log('Creating new lambda association: ' + OriginId);
                  const cachedMethods = AllowedMethods.filter(m => ['HEAD', 'GET', 'OPTIONS'].indexOf(m) >= 0);
          
                  Origins.Items.push({
                    ...Origins.Items.filter(origin => origin.Id === '404HandlerLambdaOrigin')[0],
                    Id: OriginId,
                    DomainName: Domain
                  });
                  Origins.Quantity++;
          
                  CacheBehaviors.Items = CacheBehaviors.Items || [];
                  CacheBehaviors.Items.push({
                    ...DefaultCacheBehavior,
                    PathPattern: Path,
                    TargetOriginId: OriginId,
                    AllowedMethods: {
                      Quantity: AllowedMethods.length,
                      Items: AllowedMethods,
                      CachedMethods: {
                        Quantity: cachedMethods.length,
                        Items: cachedMethods
                      }
                    }
                  });
                  CacheBehaviors.Quantity++;
      
                  break;
                case 'Delete':
                  console.log('Removing lambda association: ' + OriginId);
                  Origins.Items = Origins.Items.filter(origin => origin.Id !== OriginId);
                  Origins.Quantity = Origins.Items.length;
          
                  CacheBehaviors.Items = CacheBehaviors.Items.filter(cb => cb.PathPattern !== Path);
                  CacheBehaviors.Quantity = CacheBehaviors.Items.length;

                  break;
                case 'Update': throw 'Update NOT supported';
              }

              await client.send(new UpdateDistributionCommand({
                Id: '${CloudFrontDistro}',
                DistributionConfig,
                IfMatch: ETag
              }));
          
              do {
                const {Distribution: {Status}} = await client.send(new GetDistributionCommand({Id: '${CloudFrontDistro}'}));
                console.log(Status);
                if (Status !== 'InProgress')
                  break;
                await new Promise(resolve => setTimeout(resolve, 2000));
              } while(true);
          
              console.log('Update complete');
              await send(event, context, SUCCESS, {});
            } catch (err) {
              console.error(err);
              await send(event, context, FAILED, err);
            }
          };
      Handler: index.handler
      Runtime: nodejs18.x
      FunctionName: !Sub "${app}-cloudfront-updater-lambda"
      Role: !GetAtt CloudFrontUpdaterFunctionExecutionRole.Arn
      MemorySize: 128
      Timeout: 600

  CloudFrontUpdaterFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: allowCloudFrontAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:GetDistribution
                  - cloudfront:UpdateDistribution
                Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistro}"
        - PolicyName: allowLambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                Resource: "*"

  #####################
  # Global access
  #####################
      
  RequestSignerLambdaArn:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      DeploymentId: !Ref deploymentId
      Parameter: !Sub "${app}-request-signer-lambda-arn"
      ServiceToken: !GetAtt FetchGlobalParameterFunction.Arn

  RequestSignerUserArn:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      DeploymentId: !Ref deploymentId
      Parameter: !Sub "${app}-request-signer-user-arn"
      ServiceToken: !GetAtt FetchGlobalParameterFunction.Arn

  FetchGlobalParameterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const
            {send, SUCCESS, FAILED} = require('cfn-response'),          
            {SSMClient, GetParameterCommand} = require('@aws-sdk/client-ssm');

          exports.handler = async function(event, context) {
            console.log('Getting global parameter...');
            try {          
              const
                client = new SSMClient({region: 'us-east-1'}),
                {ResourceProperties: {Parameter}} = event,
                {Parameter: {Value}} = await client.send(new GetParameterCommand({Name: Parameter}));

              console.log(`Parameter "${Parameter}" fetched: ${Value}`);
              await send(event, context, SUCCESS, {Value});
            } catch (err) {
              console.error(err);
              await send(event, context, FAILED, err);
            }
          };
      Handler: index.handler
      Runtime: nodejs18.x
      FunctionName: !Sub "${app}-fetch-global-parameter-lambda"
      Role: !GetAtt FetchGlobalParameterFunctionExecutionRole.Arn
      MemorySize: 128
      Timeout: 20

  FetchGlobalParameterFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: allowSSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: '*'

  #####################
  # Services bucket
  #####################

  ServicesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${app}-services-bucket"

#####################
# Outputs
#####################

Outputs:
  CloudFrontUpdaterFunctionArn:
    Value: !GetAtt CloudFrontUpdaterFunction.Arn
    Export:
      Name: !Sub "${app}-cloudfront-updater-lambda-arn"
  RequestSignerUserArn:
    Value: !GetAtt RequestSignerUserArn.Value
    Export:
      Name: !Sub "${app}-request-signer-user-arn"
  ServicesBucketName:
    Value: !Ref ServicesBucket
    Export:
      Name: !Sub "${app}-services-bucket-name"