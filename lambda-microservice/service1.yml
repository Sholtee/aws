#####################################################
# service1.yml
#
# Author: Denes Solti
#####################################################
Description: Infrastructure related to the first microservice. Can be deployed in any region

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'
  functionName:
    Type: String
    Description: The lambda function name
    
Resources:
  #####################
  # Lambda
  #####################
 
  RequestHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:     
      Code:
         ZipFile: // placeholder
      FunctionName: !Ref functionName
      Handler: index.handler
      Role: !GetAtt RequestHandlerLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref RequestHandlerLambdaSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub "${app}-vpc-subnet-1-id"
          - Fn::ImportValue: !Sub "${app}-vpc-subnet-2-id"
      Environment:
        Variables:
          DB_NAME:
            Fn::ImportValue: !Sub "${app}-db-name"
          DB_ENDPOINT:
            Fn::ImportValue: !Sub "${app}-db-endpoint"
          DB_SECRET_ARN:
            Fn::ImportValue: !Sub "${app}-db-secret-arn"

  RequestHandlerLambdaUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: AWS_IAM
      TargetFunctionArn: !Ref RequestHandlerLambda

  RequestHandlerLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: allowSecretManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  Fn::ImportValue: !Sub "${app}-db-secret-arn"

  RequestHandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RequestHandlerLambda
      Principal:
        Fn::ImportValue: !Sub "${app}-request-signer-user-arn"
      Action: 'lambda:InvokeFunctionUrl'
      FunctionUrlAuthType: AWS_IAM

  RequestHandlerCloudFrontAttachment:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      OriginId: RequestHandlerOrigin
      Domain: !Select
        - 2
        - !Split
          - /
          - !GetAtt RequestHandlerLambdaUrl.FunctionUrl
      Path: /
      AllowedMethods:
        - HEAD
        - GET
        - OPTIONS
      ServiceToken:
        Fn::ImportValue: !Sub "${app}-cloudfront-updater-lambda-arn"

  RequestHandlerLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda SG
      VpcId:
        Fn::ImportValue: !Sub "${app}-vpc-id"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"