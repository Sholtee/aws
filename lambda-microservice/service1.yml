#####################################################
# service1.yml
#
# Author: Denes Solti
#####################################################
Description: Infrastructure related to the first microservice. Can be deployed in any region

Parameters:
  app:
    Type: String
    Description: The application name (including prefix)
    MaxLength: '32'
    
Resources:
  #####################
  # Lambda
  #####################
 
  RequestHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:     
      Code:
        ZipFile: |
          'use strict';
          exports.handler = function(event, context, callback) {
            try {      
              return callback(null, {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify('Hello World!')
              });         
            } catch (err) {
              console.error(err);
              return callback(err);
            }
          };
      FunctionName: !Sub "${app}-request-handler-lambda"
      Handler: index.handler
      Role: !GetAtt RequestHandlerLambdaRole.Arn
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 128
      
  RequestHandlerLambdaUrl:
    Type: "AWS::Lambda::Url"
    Properties:
      AuthType: AWS_IAM
      TargetFunctionArn: !Ref RequestHandlerLambda

  RequestHandlerLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"

  RequestHandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RequestHandlerLambda
      Principal:
        Fn::ImportValue: !Sub "${app}-request-signer-user-arn"
      Action: 'lambda:InvokeFunctionUrl'
      FunctionUrlAuthType: AWS_IAM

  RequestHandlerCloudFrontAttachment:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      OriginId: RequestHandlerOrigin
      Domain: !Select [2, !Split ["/", !GetAtt RequestHandlerLambdaUrl.FunctionUrl]]
      Path: "/"
      AllowedMethods:
        - 'HEAD'
        - 'GET'
        - 'OPTIONS'
      ServiceToken:
        Fn::ImportValue: !Sub "${app}-cloudfront-updater-lambda-arn"