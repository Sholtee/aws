#####################################################
# foundation.yml
#
# Author: Denes Solti
#####################################################
Description: Foundation infrastructure. Can be deployed in any region

Parameters:
  app:
    Type: String
    Description: The aplication name (including prefix)
    MaxLength: '32'
  deploymentId:
    Type: String
    Description: The unique deployment id. Must be changed in each deployment
    MaxLength: '50'
    
Resources:
  ###################
  # S3
  ###################

  FrontendBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${app}-frontend"
      VersioningConfiguration:
        Status: Enabled

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "${FrontendBucket.Arn}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"
              
  ###################
  # CloudFront
  ###################

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${app}"

  CloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt FrontendBucket.DomainName
            Id: 'FrontendBucketOrigin'
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        CacheBehaviors:
          - PathPattern: /
            AllowedMethods:
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
            ViewerProtocolPolicy: redirect-to-https
            OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf" # Managed-CORS-S3Origin
            CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
            TargetOriginId: FrontendBucketOrigin
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: !GetAtt RouterLambdaId.Value            
          - PathPattern: "/static/*"
            AllowedMethods:
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
            ViewerProtocolPolicy: redirect-to-https
            OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf" # Managed-CORS-S3Origin
            CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
            TargetOriginId: FrontendBucketOrigin
        DefaultCacheBehavior:
          AllowedMethods:
            - 'GET'
            - 'HEAD'
            - 'OPTIONS'
          ViewerProtocolPolicy: redirect-to-https
          OriginRequestPolicyId: "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf" # Managed-CORS-S3Origin
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !GetAtt RouterLambdaId.Value  # Will allow requests against "/" and "/index.html" only
          TargetOriginId: FrontendBucketOrigin
          
  ###################
  # Global access
  ###################        
      
  RouterLambdaId:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      DeploymentId: !Ref deploymentId  # Force refresh of RouterLambdaId.Value on each deployment
      Parameter: !Sub "${app}-router-lambda-id"
      ServiceToken: !GetAtt FetchGlobalParameterFunction.Arn

  FetchGlobalParameterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const
            {send, SUCCESS, FAILED} = require('cfn-response'),          
            {SSMClient, GetParameterCommand} = require('@aws-sdk/client-ssm');

          exports.handler = async (event, context) => {
            console.log('Getting global parameter...');
            try {          
              const
                client = new SSMClient({region: 'us-east-1'}),
                {ResourceProperties: {Parameter}} = event,
                {Parameter: {Value}} = await client.send(new GetParameterCommand({Name: Parameter}));

              console.log(`Parameter "${Parameter}" fetched: ${Value}`);
              await send(event, context, SUCCESS, {Value});
            } catch (err) {
              console.error(err);
              await send(event, context, FAILED, err);
            }
          };
      Handler: index.handler
      Runtime: nodejs18.x
      FunctionName: !Sub "${app}-fetch-global-parameter-lambda"
      Role: !GetAtt FetchGlobalParameterFunctionExecutionRole.Arn
      MemorySize: 128
      Timeout: 20

  FetchGlobalParameterFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*"
        - PolicyName: allowSSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: '*'